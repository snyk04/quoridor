@startuml
'https://plantuml.com/sequence-diagram

'-----Model-----'
    
interface IController
interface IView
interface IModel
{
    StartNewGame() : void
    MoveCurrentPlayerToCell() : void
}

class ControllerCommunication
class ViewCommunication
class ModelCommunication #brown
{
    view : IView 

    possibleMoves : PossibleMoves
    cellsManager : CellsManager
    gameCycle : GameCycle
    playersController : PlayersController
    
    HighlightAvailableCells() : void
    EndGame() : void
    MovePlayerToCell() : void
}

class Cell
{
    IsBusy : bool
}
class CellsManager
{
    AmountOfRows : int
    AmountOfColumns : int
    
    cells : Cell[,]
    
    InitializeCellField() : void
    
    CheckIfCellIsReal() : bool
    CheckIfCellIsBusy() : bool
}
class GameCycle
{
    model : Model

    gameMode : GameMode
    
    OnGameStart : Action
    OnGameEnd : Action
    
    StartNewGame() : void
    EndGame() : void
}
class PlayersController
{
    model : ModelCommunication
    
    firstPlayerStartPosition : CellCoordinates
    secondPlayerStartPosition : CellCoordinates

    firstPlayer : Player
    secondPlayer : Player
    
    bot : Bot   
    
    currentPlayer : Player
    currentPlayerType : PlayerType
    
    HandleTurnEndEvents() : void
    NullifyTurnEndEvents() : void
    
    PlacePlayersAtStartPositions() : void
    
    MovePlayerToCell() : void
    MoveCurrentPlayerToCell() : void
    
    WaitForTheFirstPlayer() : void
    WaitForTheNextPlayer() : void
        
    ComputeBotMove() : void
    BotTurn() : void
    
    ChangeCurrentPlayer() : void
}
class PossibleMoves
{
    model : ModelCommunication
    
    currentTurnPlayerCoordinates : CellCoordinates
    
    SetCurrentTurnPlayerCoordinates() : void
    
    TryToAddCellToPossibleMoves() : void
    GetPossibleMovesFromCell() : void
    ShowPossibleMoves() : void
}

class Player
{
    CurrentCellCoordinates : CellCoordinates
    
    MoveToCell() : void
}
abstract class Bot
{
    CellToMove : CellCoordinates
    
    MakeMove() : MoveType
}
class RandomBot

IModel <|.. ModelCommunication

ModelCommunication o- ViewCommunication

ModelCommunication *--o PossibleMoves
ModelCommunication *-- CellsManager
ModelCommunication *--o GameCycle
ModelCommunication *--o PlayersController

CellsManager *-- Cell

PlayersController *-- Player
PlayersController *-- Bot
Player <|- Bot
Bot <|-- RandomBot
    
'-----View-----'

interface IView
{
    UnhighlightAllCells() : void
    HighlightCells() : void
    MovePlayerToCell() : void

    ShowVictory() : void
}
    
class ViewCommunication #brown
{
    cellHighlighter : CellHighlighter
    playerMover : PlayerMover
}

class CellHighlighter
{
    cellStorage : CellStorage

    UnhighlightAllCells() : void
    HighlightCells() : void
}
class CellStorage
{
   cells : List<CellVisual>
   amountOfColumns : int

   TwoDimensionalToOneDimensional() : int
   GetCell() : CellVisual
}
class CellVisual
{
    button : Button
    
    Highlight() : void
    Unhighlight() : void
}
class PlayerMover
{
    cellStorage : CellStorage
    
    firstPlayer : Transform
    secondPlayer : Transform
            
    MovePlayerToCell() : void
}
    
IView <|..  ViewCommunication

ViewCommunication o-- CellHighlighter
ViewCommunication o-- PlayerMover
CellHighlighter o-- CellStorage
PlayerMover o-- CellStorage
CellStorage o- CellVisual

'-----Controller-----'

interface IController
{
    StartNewGame() : void
    Quit() : void
    
    ChooseCell() : void
}

class ControllerCommunication #brown
{
    viewCommunication : ViewCommunication
    gameModeController : GameModeController
    view : IView
    model : ModelCommunication
}

class GameModeController
{
    gameModeDropdown : Dropdown
    GameMode : GameMode
}
class CellButton
{
    controller : ControllerCommunication
}

IController <|.. ControllerCommunication

ControllerCommunication *- ModelCommunication

ControllerCommunication o-- GameModeController
CellButton o- ControllerCommunication

@enduml