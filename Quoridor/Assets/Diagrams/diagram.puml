@startuml <diagram.png>

'-----Model-----'
    
interface IModel
{
    StartNewGame() : void
    
    MoveCurrentPlayerToCell() : void
    TryToPlaceWall() : void
}
class ModelCommunication #brown
{
    EndGame() : void
    HighlightAvailableCells() : void
    MovePlayerToCell() : void
    PlaceWall() : void
}

class Cell
{
    IsBusy : bool
    
    BecomeBusy() : void
    BecomeFree() : void
}
class Wall
{
    BlockedCellPairs : List<CellPair>
    OverlappedWalls : List<Coordinates>
}
class GameCycle
{
    GameMode : GameMode
    
    OnGameStart : Action
    OnGameEnd : Action
    
    StartNewGame() : void
    EndGame() : void
}
class CellsManager
{
    AmountOfRows : int
    AmountOfColumns : int
    
    Cells : Cell[,]
       
    CellIsBusy() : bool
    CellIsReal() : bool
    WallIsBetweenCells() : bool
}
class PlayersController
{
    OnPlayerChange : Action<Coordinates>
    OnPlayerTurnEnd : Action
    OnBotTurnEnd : Action
    OnWallPlaced : Action
    
    MoveCurrentPlayerToCell() : void
    CurrentPlayerTryToPlaceWall() : void
}
class PossibleMoves
{
    SetCurrentTurnPlayerCoordinates() : void
    
    GetPossibleMovesFromCell() : void
}
class WallsManager
{
    AmountOfRows : int
    AmountOfColumns : int
    
    Walls : Wall[,]
    BlockedCellPairs : List<CellPair>
    WallsThatCanBePlaced : List<Coordinates>
    
    CheckIfWallCanBePlaced() : bool
    PlaceWall() : void
    DestroyWall() : void
}

class Player
{
    AmountOfWalls : int
    CurrentCell : Coordinates
    
    MoveToCell() : void
    
    PlaceWall() : void
    ResetAmountOfWalls() : void
}
abstract class Bot
{
    CellToMove : Coordinates
    WallToPlace : Coordinates
    
    MakeMove() : MoveType
}
class RandomBot

IModel <|.. ModelCommunication

ModelCommunication o- ViewCommunication

ModelCommunication *--o GameCycle
ModelCommunication *--o CellsManager
ModelCommunication *--o PlayersController
ModelCommunication *--o PossibleMoves
ModelCommunication *-- WallsManager

CellsManager *-- Cell
WallsManager *-- Wall

PlayersController *-- Player
PlayersController *-- Bot
Player <|- Bot
Bot <|-- RandomBot
    
'-----View-----'

interface IView
{
    HighlightCells() : void
    MovePlayerToCell() : void
    PlaceWall() : void

    EndGame() : void
}
class ViewCommunication #brown

interface IEnumerable<T>
{
    GetEnumerator() : IEnumerator<T>
}
class Storage<T>

class CellHighlighter
{
    UnhighlightAllCells() : void
    HighlightCells() : void
}
class CellStorage
class CellVisual
{
    Highlight() : void
    Unhighlight() : void
}

class WallPlacer
{
    PlaceWall() : void
}
class WallStorage
class WallVisual
{
    HandlePlace() : void
    
    Highlight() : void
    Unhighlight() : void
}

class PlayerMover
{
    MovePlayerToCell() : void
}
    
IView <|..  ViewCommunication

Storage .|> IEnumerable
CellStorage -|> Storage
WallStorage -|> Storage

ViewCommunication o-- CellHighlighter
ViewCommunication o-- PlayerMover
ViewCommunication o-- WallPlacer

CellHighlighter o-- CellStorage
PlayerMover o-- CellStorage
CellStorage o-- CellVisual

WallPlacer o-- WallStorage
WallStorage o-- WallVisual

'-----Controller-----'

interface IController
{
    StartNewGame() : void
    Quit() : void
    
    ChooseCell() : void
    TryToPlaceWall() : void
}

class ControllerCommunication #brown

class GameModeController
{
    GameMode : GameMode
}

abstract class Button
{
    NotifyController() : void
}
class CellButton
class WallButton

IController <|.. ControllerCommunication

ControllerCommunication *- ModelCommunication

ControllerCommunication o-- GameModeController

Button <|-- CellButton
Button <|-- WallButton
CellButton o-- ControllerCommunication
WallButton o-- ControllerCommunication

@enduml